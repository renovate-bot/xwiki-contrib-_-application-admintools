<?xml version="1.0" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc>
  <web>Admin</web>
  <name>CheckProgrammingRights</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <parent>Admin.WebHome</parent>
  <creator>xwiki:XWiki.Admin</creator>
  <author>xwiki:XWiki.Admin</author>
  <customClass/>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <creationDate>1375188485000</creationDate>
  <date>1375188485000</date>
  <contentUpdateDate>1375188485000</contentUpdateDate>
  <version>1.1</version>
  <title>Check programming rights</title>
  <defaultTemplate/>
  <validationScript/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.0</syntaxId>
  <hidden>true</hidden>
  <object>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <name>Admin.CheckProgrammingRights</name>
    <number>0</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>18d70e37-7b7c-476b-911c-39a22da0e9bd</guid>
    <property>
      <cache>forbid</cache>
    </property>
    <property>
      <code>document.observe("xwiki:dom:loaded", function() {

    var handleSelect = function(event, checked) {
        var fragments = event.findElement().identify().split(':');
        if (fragments.length == 2) {
            var wikiname = fragments[1];
            var id = 'pagelist:' + wikiname;
            var selector = '#' + id;

            $(id).select('input[name=pagelist]').each(function (input) {
                input.checked = checked;
            });
        } else {
            $$('input[name=pagelist]').each(function (input) {
                input.checked = checked;
            });
        }
    };

    $$('.unselect_all').each(function (element) {
        element.observe('click', function (event) {
            handleSelect(event, false);
        });
    });

    $$('.select_all').each(function (element) {
        element.observe('click', function (event) {
            handleSelect(event, true);
        });
    });
});</code>
    </property>
    <property>
      <name>Checkbox control</name>
    </property>
    <property>
      <parse>0</parse>
    </property>
    <property>
      <use>currentPage</use>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.RequiredRightClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <level>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>level</name>
        <number>1</number>
        <picker>0</picker>
        <prettyName>level</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <sort>none</sort>
        <unmodifiable>0</unmodifiable>
        <validationMessage/>
        <validationRegExp/>
        <values>edit|programming</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </level>
    </class>
    <name>Admin.CheckProgrammingRights</name>
    <number>0</number>
    <className>XWiki.RequiredRightClass</className>
    <guid>2e93c625-8350-4ca0-8437-90153c3394d5</guid>
    <property>
      <level>programming</level>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.StyleSheetExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <name>Admin.CheckProgrammingRights</name>
    <number>0</number>
    <className>XWiki.StyleSheetExtension</className>
    <guid>01831ba2-9cb5-4583-9e14-7812fe173615</guid>
    <property>
      <cache>forbid</cache>
    </property>
    <property>
      <code>legend.wikiname {
    font-size: larger;
    padding-top: 0.5em;
    padding-bottom: 0.5em;
}

div.select_checkbox_control {
    margin-bottom: 1em;
}

a.select_all, a.unselect_all {
    cursor: pointer;
}</code>
    </property>
    <property>
      <name>Check programming style</name>
    </property>
    <property>
      <parse>0</parse>
    </property>
    <property>
      <use>currentPage</use>
    </property>
  </object>
  <content>{{groovy}}
import org.xwiki.model.reference.EntityReference
import org.xwiki.security.authorization.Right

xwiki.ssx.use(doc.getFullName())
xwiki.jsx.use(doc.getFullName())

if (!"post".equalsIgnoreCase(request.getMethod())) {
    printForm(pageListPerWiki())
} else if (!services.csrf.isTokenValid(request.getParameter('form_token'))) {
    response.sendRedirect(services.csrf.getResubmissionURL())
} else {
    changePagesAuthor(request.getParameterValues('pagelist'))
}

def getXClassPageInstances(xClass) {
  def templateName = xClass.replace('Class', '') + 'Template'
  def list = services.query.hql("select distinct doc.fullName from XWikiDocument doc, BaseObject as obj where obj.name = doc.fullName and obj.className = '$xClass' and doc.fullName != '$templateName'").execute()
  return list
}

def getTranslationPages(String scope) {
  def query = services.query.hql("select distinct doc.fullName from XWikiDocument doc, BaseObject as obj, StringProperty as prop where obj.name = doc.fullName and obj.className = :class and prop.id.id = obj.id and prop.id.name = 'scope' and prop.value = :scope ")
  query.bindValue('class', 'XWiki.TranslationDocumentClass')
  query.bindValue('scope', scope)
  return query.execute()
}

def getJsxOrSsxPages(String scope) {
  def query = services.query.hql("select distinct doc.fullName from XWikiDocument doc, BaseObject as obj, StringProperty as prop where obj.name = doc.fullName and (obj.className = :class1 or obj.className = :class2) and prop.id.id = obj.id and prop.id.name = 'use' and prop.value = :scope ")
  query.bindValue('class1', 'XWiki.JavaScriptExtension')
  query.bindValue('class2', 'XWiki.StyleSheetExtension')
  query.bindValue('scope', scope)
  return query.execute()
}

def getScriptedJsxOrSsxPages() {
  def query = services.query.hql("select distinct doc.fullName from XWikiDocument doc, BaseObject as obj, IntegerProperty as prop where obj.name = doc.fullName and (obj.className = :class1 or obj.className = :class2) and prop.id.id = obj.id and prop.id.name = 'parse' and prop.value = 1 ")
  query.bindValue('class1', 'XWiki.JavaScriptExtension')
  query.bindValue('class2', 'XWiki.StyleSheetExtension')
  return query.execute()
}

def getPagesWithScriptedContent(scriptType) {
  def query = services.query.hql("select distinct doc.fullName from XWikiDocument doc where doc.content like :like")
  // Trick to not declare a script which would get interpreted within this page content
  def like = '%{{:tag}}%{{/:tag}}%'
  like = like.replaceAll(':tag', scriptType)
  query.bindValue('like', like)
  return query.execute()
}

def hasRight(EntityReference reference, Right right) {
  def page = xwiki.getDocument(reference)
  if (page != null) {
    def authorReference = page.getAuthorReference()
    def hasAccess = services.security.authorization.hasAccess(right, authorReference, reference)
    return hasAccess
  } else {
    // This seems to happen sometimes when an error occurred on target wiki initialization
    out.println("{{warning}}An error occurred when retrieving page $reference.{{/warning}}")
  }
}

def pageListPerWiki()
{

    def wikilist = [ "xwiki" ]
    if (!xwiki.metaClass.respondsTo(xwiki, 'isVirtualMode') || xwiki.isVirtualMode())  {
        def wikiManager = xwiki.getPlugin("wikimanager")
        if (wikiManager != null) {
            wikilist = wikiManager.getAllWikis()
        } else {
            wikilist = services.wiki?.getAll().collect({ wiki -&gt; wiki.id })
        }
    }

    def knownpageslist = [
        "AnnotationCode.Script",
        "AnnotationCode.Settings",
        "AnnotationCode.Style",
        "Main.Activity",
        "Main.SpaceIndex",
        "Main.Spaces",
        "XWiki.AllAttachments",
    ];

    def context2 = xcontext.getContext()
    def db = context2.getDatabase()

    def wikiPagelists = [:]

    try {
        for (wiki in wikilist) {
            def wikiname = wiki.toString()
            context2.setDatabase(wikiname)
            // get all the pages which have a required rights object
            // attached to them, that specifies either edit or
            // programming
            def pagelist = services.query.xwql("select distinct doc.fullName from Document doc, doc.object(XWiki.RequiredRightClass) as reqRight where reqRight.level = 'programming' or reqRight.level = 'edit'").execute()
            // add the known pages that need to be saved with programming
            // || edit rights to the list of pages, if they don't have the '
            // required rights object
            for (knownpage in knownpageslist) {
                if (!pagelist.contains(knownpage) &amp;&amp; xwiki.exists(knownpage)) {
                    pagelist.add(knownpage)
                }
            }

            // Create map linking rights to page lists
            wikiPagelists[wikiname] = [:]

            /** Get pages requiring programming rights */

            // Add all XClass instances which are likely to need programming rights:
            // - WikiComponents generally use Groovy scripts
            // - SchedulerJobs use either a Groovy script or a Java class
            ['XWiki.ComponentClass', 'XWiki.SchedulerJobClass'].each{
              it -&gt; pagelist.addAll(getXClassPageInstances(it))
            }

            // Also add all pages containing Groovy code in their content (they may need to be unchecked in case
            // it's actually code documentation, not real code)
            pagelist.addAll(getPagesWithScriptedContent('groovy'))

            // Add translation bundles with global scope since they require programming right
            // ref: DocumentTranslationBundleFactory#checkRegistrationAuthorization
            pagelist.addAll(getTranslationPages('GLOBAL'))
            // JSX or SSX pages which are always loaded require programming right
            // ref: AbstractDocumentSkinExtensionPlugin#getAlwaysUsedExtensions
            pagelist.addAll(getJsxOrSsxPages('always'))

            def rs = xwiki.getXWiki().getRightService()

            wikiPagelists[wikiname]['programming'] = pagelist.findAll{
                name -&gt; !rs.hasProgrammingRights(xwiki.getDocument(name).getDocument(), context2) ||
                    needsRequiredRightsObj(xwiki.getDocument(name))
            }

            /** Get pages requiring script right */

            // Using a Set to avoid duplicates
            wikiPagelists[wikiname]['script'] = new HashSet()

            // Macros, UIExtensions and Skins typically contain Velocity code
            ['XWiki.WikiMacroClass', 'XWiki.UIExtensionClass', 'XWiki.XWikiSkins'].each{
              it -&gt; wikiPagelists[wikiname]['script'].addAll(getXClassPageInstances(it))
            }

            wikiPagelists[wikiname]['script'].addAll(getScriptedJsxOrSsxPages())

            // Add all pages containing a Velocity script saved by a user lacking script right
            wikiPagelists[wikiname]['script'].addAll(getPagesWithScriptedContent('velocity'))
            wikiPagelists[wikiname]['script'] = wikiPagelists[wikiname]['script'].findAll{
              pageId -&gt;
                def reference = services.model.resolveDocument(wikiname + ':' + pageId)
                return !hasRight(reference, Right.SCRIPT)
            }

            /** Get pages likely to require admin right */

            wikiPagelists[wikiname]['admin'] = new HashSet()

            // Add translation documents with wiki scope
            wikiPagelists[wikiname]['admin'].addAll(getTranslationPages('WIKI'))
            wikiPagelists[wikiname]['admin'] = wikiPagelists[wikiname]['admin'].findAll{
              pageId -&gt;
                def reference = services.model.resolveDocument(wikiname + ':' + pageId)
                return !hasRight(reference, Right.ADMIN)
            }

        }
    } finally {
        context2.setDatabase(db)
    }

    return wikiPagelists
}

def printForm(pagelistPerWiki)
{

    println "{{info}} You need to run this with a user that has programming rights, otherwise it will have no effect. {{/info}}\n\n"

    println("""\
{{html}}
&lt;span class=\"buttonwrapper\"&gt;
&lt;a id=\"select_all_all_wikis\" class=\"select_all\"&gt;select all in all wikis&lt;/a&gt;
&lt;/span&gt;
&lt;span class=\"buttonwrapper\"&gt;
&lt;a id=\"unselect_all_all_wikis\" class=\"unselect_all\"&gt;select none&lt;/a&gt;
&lt;/span&gt;
&lt;form action=\"${xwiki.getURL(doc.getFullName())}\" method=\"post\" &gt;
&lt;input type=\"hidden\" name=\"form_token\" value=\"${services.csrf.token}\" /&gt;
""")

    for (wikiname in pagelistPerWiki.keySet()) {
        if (pagelistPerWiki.get(wikiname).size() == 0) {
            continue
        }
        println("&lt;fieldset id=\"pagelist:${wikiname}\" class=\"pagelist\" &gt;")
        println("&lt;h2&gt;&lt;legend class=\"wikiname\"&gt;Wiki: ${wikiname}&lt;/legend&gt;&lt;/h2&gt;")
        println("""\
&lt;div class=\"select_checkbox_control\"&gt;
&lt;span class=\"buttonwrapper\"&gt;
&lt;a id=\"select_all:${wikiname}\" class=\"select_all\"&gt;select all&lt;/a&gt;
&lt;/span&gt;
&lt;span class=\"buttonwrapper\"&gt;
&lt;a id=\"unselect_all:${wikiname}\" class=\"unselect_all\"&gt;select none&lt;/a&gt;
&lt;/span&gt;
&lt;/div&gt;
""")
        println("&lt;div&gt;")
        def rights = ['programming', 'admin', 'script']
        rights.each{ right -&gt;
          def str = right.capitalize()
          println("&lt;h2&gt; $str right &lt;/h2&gt;")
          for (page in pagelistPerWiki.get(wikiname).get(right)) {
            println("""\
&lt;div class=\"page_checkbox_item\"&gt;
&lt;input type=\"checkbox\" name=\"pagelist\" id=\"page_${wikiname}_${page}\"
       class=\"${wikiname}_page\" value=\"${wikiname}:${page}\"/&gt;
 &lt;a href=\"${xwiki.getURL(wikiname + ':' + page)}?viewer=code\"&gt;${page}&lt;/a&gt;
&lt;/div&gt;
""")
          }
        }
        println("&lt;/div&gt;")
        println("&lt;/fieldset&gt;")
    }

    println("""\
&lt;hr /&gt;
&lt;span class=\"buttonwrapper\"&gt;
&lt;input class=\"button\" type=\"submit\" value=\"save with programming rights\" /&gt;
&lt;/span&gt;
&lt;/form&gt;
{{/html}}
""")

}

def needsRequiredRightsObj(prDoc)
{
    def objList = prDoc.getObjects('XWiki.RequiredRightClass');
    return objList == null || objList.findAll{
        obj -&gt; obj.getProperty('level').getValue() == 'programming' ||
            obj.getProperty('level').getValue() == 'edit'
    }.size() == 0
}

def changePagesAuthor(pagelist) {
    for (page in pagelist) {
        def prDoc = xwiki.getDocument(page)
        try {
          def protectedDoc = prDoc.document
          // Update the page content author in order to fix programming rights.
          protectedDoc.setContentAuthorReference(xcontext.getContext().getUserReference())
          // We need to change the page author in order to have a history about the user who executed this script otherwise the last author will be kept.
          protectedDoc.setAuthorReference(xcontext.getContext().getUserReference())
          xwiki.getXWiki().saveDocument(protectedDoc, "Changed the author of the page to fix programming rights", xcontext.context)
          println " * Successfully changed the author of the page '${page}'"
        } catch (Exception e) {
          println " * Failed to change the author of the page '${page}': " + e
        }
    }
}
{{/groovy}}
</content>
</xwikidoc>
