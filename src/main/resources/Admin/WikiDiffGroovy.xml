<?xml version="1.0" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.3" reference="Admin.WikiDiffGroovy" locale="">
  <web>Admin</web>
  <name>WikiDiffGroovy</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <parent>Admin.WebHome</parent>
  <creator>xwiki:XWiki.Admin</creator>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <creationDate>1375188489000</creationDate>
  <date>1375893663000</date>
  <contentUpdateDate>1375893663000</contentUpdateDate>
  <version>1.1</version>
  <title/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.0</syntaxId>
  <hidden>true</hidden>
  <content>/* Groovy Class #* */

import java.util.*
import java.net.URL;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import java.io.*;
import com.xpn.xwiki.doc.XWikiDocument;
import com.xpn.xwiki.api.Document;
import java.util.regex.Pattern;

class Diff {
  def xwiki;
  def context;
  def currentWiki;

  public setContext(context, xwiki) {
    this.xwiki = xwiki
    this.context = context
  }

  public setWiki(wiki) {
    this.currentWiki = context.getDatabase();
    this.context.getContext().setDatabase(wiki);
  }

  public resetWiki() {
    if (currentWiki!=null)
     this.context.getContext().setDatabase(currentWiki);
  }

  public clean1(content) {
    return content.replaceAll("\r", "").replaceAll("\n", "").replaceAll("(?s)&lt;attachment&gt;(.*?)&lt;content&gt;(.*?)&lt;/content&gt;(.*?)&lt;/attachment&gt;", "&lt;attachment&gt;\$1&lt;content&gt;&lt;/content&gt;\$3&lt;/attachment&gt;").replaceAll("(?s)&lt;guid&gt;(.*?)&lt;/guid&gt;", "&lt;guid&gt;&lt;/guid&gt;")
  }

  public clean2(content) {
    return content.replaceAll("\r", "").replaceAll("(?s)&lt;attachment&gt;(.*?)&lt;content&gt;(.*?)&lt;/content&gt;(.*?)&lt;/attachment&gt;", "&lt;attachment&gt;\$1&lt;content&gt;&lt;/content&gt;\$3&lt;/attachment&gt;").replaceAll("(?s)&lt;guid&gt;(.*?)&lt;/guid&gt;", "&lt;guid&gt;&lt;/guid&gt;")
  }
 
  public save(filename, content, bclean) {
   FileOutputStream fis = new FileOutputStream(new File("/tmp/${filename}"));
   def data = (bclean) ? clean1(content) : content
   fis.write(data.getBytes());
   fis.close();
  }

  boolean compare(oldContent, newContent) {
        oldContent = clean1(oldContent)
        newContent = clean1(newContent)
        return !oldContent.equals(newContent);
  }

  String diff(def oldContent, def newContent) {
        oldContent = clean2(oldContent)
        newContent = clean2(newContent)
        return xwiki.diff.getDifferencesAsHTML(oldContent, newContent, false);
  }

  public getDocument(content) {
      def newdoc = new XWikiDocument();
      newdoc.fromXML(content);
      return new Document(newdoc, context.getContext());
  }

  public getXMLFromString(content) {
      def newdoc = new XWikiDocument();
      newdoc.fromXML(content);
      return getXML2(newdoc);
  }

  public getXML(pagedoc) {
      def clonedDoc = pagedoc.document.clone();
      return getXML2(clonedDoc);
  }

  public getXML2(clonedDoc) {
        def defaultUser = "XWiki.Admin";
        def defaultDate = new Date("01/01/2010");

        // remove Tag object
        if (clonedDoc.getObject("XWiki.TagClass")) {
          clonedDoc.removeObject(clonedDoc.getObject("XWiki.TagClass"));
        }

        if (defaultUser &amp;&amp; defaultUser!="") {
          clonedDoc.setCreator(defaultUser);
          clonedDoc.setContentAuthor(defaultUser);
          clonedDoc.setAuthor(defaultUser);
        } else {
          clonedDoc.setCreator(clonedDoc.getAuthor());
          clonedDoc.setContentAuthor(clonedDoc.getAuthor());
        }
    
        if (defaultDate &amp;&amp; defaultDate!="") {
          clonedDoc.setCreationDate(defaultDate);
          clonedDoc.setContentUpdateDate(defaultDate);
          clonedDoc.setDate(defaultDate);
          clonedDoc.setVersion("1.1");
        } else {
          clonedDoc.setContentUpdateDate(clonedDoc.getDate())
          clonedDoc.setCreationDate(clonedDoc.getDate())
          clonedDoc.setVersion("1.1");
        }
        clonedDoc.setComment("");
        clonedDoc.setMinorEdit(false);
        def c = clonedDoc.toXML(true, false, true, false, context.getContext())
        return c.trim().replaceAll("[\r]","");
    }

    Map&lt;String, String&gt; getZipContent(String url) throws Exception
    {
        Map&lt;String, String&gt; zipContent = new HashMap&lt;String, String&gt;();
        
        ZipInputStream zis = new ZipInputStream(new URL(url).openStream());
        byte[] buffer = new byte[2048];
        ZipEntry entry;
        while ((entry = zis.getNextEntry()) != null) {
            StringBuffer content = new StringBuffer();
            int len = 0;
            while ((len = zis.read(buffer)) &gt; 0)
            {
                content.append(new String(buffer, 0, len, "UTF-8"));
            }
            zipContent.put(entry.getName(), content.toString());
        }
        zis.close();
        
        return zipContent;
    }

    boolean isOtherThanNewRevisonDiff(String HTMLDiff) {
        // Match XML tags that are not &lt;date&gt; or &lt;/date&gt; or &lt;version&gt; or &lt;/version&gt;
        boolean m1 = Pattern.matches("(.*)(&amp;#60;)(?!date|version|\\/date|\\/version)(.*)(&amp;#62;)(.*)", HTMLDiff);

        // Match diff that has XML tags
        boolean m2 = Pattern.matches("(.*)(&amp;#60;)(.*)(&amp;#62;)(.*)", HTMLDiff);

        return m1 || !m2;
    }

}

/* *# */</content>
</xwikidoc>
