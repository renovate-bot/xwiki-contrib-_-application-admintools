<?xml version="1.0" encoding="UTF-8"?>
<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.3" reference="Admin.SQLToolsGroovy" locale="">
  <web>Admin</web>
  <name>SQLToolsGroovy</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <creationDate>1375188484000</creationDate>
  <parent>Admin.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <date>1593082115000</date>
  <contentUpdateDate>1593082115000</contentUpdateDate>
  <version>1.1</version>
  <title>SQLToolsGroovy</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>/**
 * Import
 */
import org.apache.velocity.tools.generic.EscapeTool
import java.sql.*
import com.xpn.xwiki.store.DatabaseProduct

/**
 * Class
 */
class SQLTools{
  class DatabaseConfiguration {
    String CONFIGURATION_PREFIX = 'hibernate.connection.'
    def databaseProductName
    String url
    String user
    String password
    String driver
    String query = 'SHOW TABLES'

    DatabaseConfiguration(request, xcontext){
      def hibernateStore = xcontext.getContext().getWiki().getHibernateStore()
      def configuration = hibernateStore.getConfiguration()
      this.url = (request != null &amp;&amp; request.url != null) ? request.url : configuration.getProperty(CONFIGURATION_PREFIX + 'url')
      this.user = (request != null &amp;&amp; request.user != null) ? request.user : configuration.getProperty(CONFIGURATION_PREFIX + 'username')
      this.password = (request != null &amp;&amp; request.password != null) ? request.password : configuration.getProperty(CONFIGURATION_PREFIX + 'password')
      this.driver = (request != null &amp;&amp; request.driver != null) ? request.driver : configuration.getProperty(CONFIGURATION_PREFIX + 'driver_class')
      this.databaseProductName = hibernateStore.getDatabaseProductName(xcontext.getContext())
      if(request != null &amp;&amp; request.query != null){
        this.query = request.query
      }
      else if(DatabaseProduct.HSQLDB.equals(this.databaseProductName)){
        this.query = "SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE='BASE TABLE'"
      }
      else if(DatabaseProduct.ORACLE.equals(this.databaseProductName)){
        this.query = 'SELECT table_name FROM dba_tables'
      }
      else if(DatabaseProduct.POSTGRESQL.equals(this.databaseProductName)){
        this.query = 'SELECT * FROM pg_catalog.pg_tables'
      }
      else if(DatabaseProduct.MSSQL.equals(this.databaseProductName)){
        this.query = "SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE='BASE TABLE'"
      }
      else if(DatabaseProduct.DB2.equals(this.databaseProductName)){
        this.query = "SELECT * FROM SYSIBM.SYSTABLES WHERE type = 'T'"
      }
    }

    String getUrl(){
      return url
    }

    String getUser(){
      return user
    }

    String getPassword(){
      return password
    }

    String getDriver(){
      return driver
    }

    String getQuery(){
      return query
    }

    def getDatabaseProductName(){
      return databaseProductName
    }
  }

  /**
   * Get Form
   */
  String getForm(request, doc, withJDBCForm, withQuery, xcontext, csrfToken){
    def databaseConfiguration = new DatabaseConfiguration(request, xcontext)
    def escapeTool = new EscapeTool()
    def spageUrl = escapeTool.xml(doc.getURL())
    
    // &lt;form&gt;
    def toReturn = """
      {{html clean=="false"}}
      &lt;form action="${spageUrl}#HResults" class="xform" method="post"&gt;
        &lt;input type="hidden" name="form_token" value="${csrfToken}" /&gt;
    """;
    // JDB Form (user, password driver, url)
    if(withJDBCForm){
      // Get/Escape datas
      def surl = escapeTool.xml(databaseConfiguration.getUrl())
      def suser = escapeTool.xml(databaseConfiguration.getUser())
      def spassword = escapeTool.xml(databaseConfiguration.getPassword())
      def sdriver = escapeTool.xml(databaseConfiguration.getDriver())
    
      // Print form
      toReturn += """
        &lt;dl&gt;
          &lt;dt&gt;
            &lt;label for="user"&gt;User:&lt;/label&gt;
          &lt;/dt&gt;
          &lt;dd&gt;
            &lt;input type="text" name="user" id="user" value="${suser}" size="80" /&gt;
          &lt;/dd&gt;
        &lt;/dl&gt;
        &lt;dl&gt;
          &lt;dt&gt;
            &lt;label for="password"&gt;Password:&lt;/label&gt;
          &lt;/dt&gt;
          &lt;dd&gt;
            &lt;input type="password" name="password" id="password" value="${spassword}" size="80" autocomplete="new-password" /&gt;
          &lt;/dd&gt;
        &lt;/dl&gt;
        &lt;dl&gt;
          &lt;dt&gt;
            &lt;label for="url"&gt;URL:&lt;/label&gt;
          &lt;/dt&gt;
          &lt;dd&gt;
            &lt;input type="text" name="url" id="url" value="${surl}" size="80" /&gt;
          &lt;/dd&gt;
        &lt;/dl&gt;
        &lt;dl&gt;
          &lt;dt&gt;
            &lt;label for="Driver"&gt;Driver:&lt;/label&gt;
          &lt;/dt&gt;
          &lt;dd&gt;
            &lt;input type="text" name="driver" id="driver" value="${sdriver}" size="80" /&gt;
          &lt;/dd&gt;
        &lt;/dl&gt;
      """;
    }
    // &lt;texteare&gt;Query&lt;/textarea&gt;
    if(withQuery){
      // Get the query
      def squery = escapeTool.xml(databaseConfiguration.getQuery())
      
      // Print the form
      toReturn += """
        &lt;dl&gt;
          &lt;dt&gt;
            &lt;label for="query"&gt;Query:&lt;/label&gt;
          &lt;/dt&gt;
          &lt;dd&gt;
            &lt;textarea name="query" id="query" cols="100" rows="10"/&gt;${squery}&lt;/textarea&gt;
          &lt;/dd&gt;    
        &lt;/dl&gt; 
      """
    }
    
    // &lt;/form&gt;
    toReturn += """
      &lt;p&gt;&lt;span class="buttonwrapper"&gt;&lt;input type="submit" value="Go" class="button"/&gt;&lt;/span&gt;&lt;/p&gt;
      &lt;/form&gt;
      {{/html}}
    """
    
    return toReturn
  }
  
  /**
   * Get connection from request
   */
  Connection getConnectionFromRequest(request){
    String userName = request.user
    String password = request.password
    String url = request.url
    if(!request.user)
      throw new Exception("You must fill the field 'user'")
    if(!request.url)
      throw new Exception("You must fill the field 'url'")
    if(!request.driver)
      throw new Exception("You must fill the field 'driver'")
    Class.forName (request.driver).newInstance ()
    def conn = DriverManager.getConnection (url, userName, password)
    return conn
  }
  
  /**
   * Get XWiki Database System
   */
  String getXWikiDatabaseSystem(xwiki, xcontext){
    def databaseConfiguration = new DatabaseConfiguration(null, xcontext)
    return databaseConfiguration.getDatabaseProductName()
  }
  
  /**
   * Get XWiki Database System by extracting product name from database metadata provided by JDBC connection itself
   * provided by Hibernate
   */
   String getXWikiDatabaseSystemFromDatabaseMetadata(xcontext){
     xcontext.context.getWiki().getHibernateStore().getDatabaseMetaData().getDatabaseProductName()
   }

  /**
   * Get XWiki Connection
   */
  def getXWikiConnection(xwiki, xcontext){
    def store = xwiki.getXWiki().getHibernateStore();
    store.beginTransaction(xcontext.getContext())
    def session = store.getSession(xcontext.getContext())
    return session.connection()
  }
  
  
  /**
   * Get results
   */
  String getResults(connection, sql, closeConnectionAtTheEnd){
    def toReturn = ""
    try{
      def stmt = connection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY)
      try {
        def sqlLower = sql.toLowerCase().trim()
        if(sqlLower.startsWith("delete") || sqlLower.startsWith("update") || sqlLower.startsWith("insert") || sqlLower.startsWith("drop")){
          int results = stmt.executeUpdate(sql)
          return "\n{{success}}$results lines changed{{/success}}\n"
        }else{
          def resultset = stmt.executeQuery(sql)
          def mdata = resultset.getMetaData()
          def nbcols = mdata.getColumnCount()
          for (def i=1;i&lt;=nbcols;i++) {
            toReturn += "|="
            toReturn += mdata.getColumnName(i)
          }
          if (nbcols &gt; 1) toReturn +=  "\n"
          while (resultset.next()) {
            for (def i=1;i&lt;=nbcols;i++) {
              def value = resultset.getString(i)
              if ((value==null)||(value==""))
                value = " "
              toReturn += "|"
              toReturn += "{{{${value}}}}"
            }
            toReturn +=  "\n"
          }
        }
      }
      catch (Exception e2) {
        toReturn += "\n{{error}} **Error running sql: {{{${sql}}}}**\n" + e2.getMessage() + "{{/error}}\n"
      } finally {
        stmt.close()
        if(closeConnectionAtTheEnd)
          connection.close()
      }
    }
    catch(Exception e){
      toReturn += "\n{{error}} Error: " + e.getMessage() + "{{/error}}\n"
    }
    return toReturn
  }

  /**
   * Get Tables
   */
  String getTables(connection){
    def sql = "SHOW TABLES"
    def stmt1 = connection.createStatement()
    def toReturn = ""
    try {
      // Get Tables list
      def rs = stmt1.executeQuery(sql)
      while(rs.next()){
        def table = rs.getString(1)
        toReturn += "== ${table} ==\n"
        toReturn += getResults(connection, "DESCRIBE ${table}", false)
      }
    }
    catch (Exception e2) {
      toReturn += "{{error}} **Error running sql: {{{${sql}}}}**\n" + e2.getMessage() + "{{/error}}\n"
    } finally {
      stmt1.close()
      connection.close()
    }
    return toReturn
  }

}</content>
  <object>
    <name>Admin.SQLToolsGroovy</name>
    <number>0</number>
    <className>XWiki.RequiredRightClass</className>
    <guid>47f1dd58-f20a-4799-a2e1-e1cfd0f0d61b</guid>
    <class>
      <name>XWiki.RequiredRightClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <level>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>level</name>
        <number>1</number>
        <picker>0</picker>
        <prettyName>level</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <sort>none</sort>
        <unmodifiable>0</unmodifiable>
        <validationMessage/>
        <validationRegExp/>
        <values>edit|programming</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </level>
    </class>
    <property>
      <level>programming</level>
    </property>
  </object>
</xwikidoc>
