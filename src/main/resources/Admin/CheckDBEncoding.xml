<?xml version="1.0" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.3" reference="Admin.CheckDBEncoding" locale="">
  <web>Admin</web>
  <name>CheckDBEncoding</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <creationDate>1375903656000</creationDate>
  <parent>Admin.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <date>1593083954000</date>
  <contentUpdateDate>1593083954000</contentUpdateDate>
  <version>1.1</version>
  <title>MySQL Encoding Check</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{groovy}}


def context = xcontext.getContext();
def store = xwiki.getXWiki().getStore().getStore();
if (services.wiki) {
    wikilist = []
    services.wiki.getAll().each { wikilist.add(it.id) }
} else if (services.wikimanager) {
    wikilist = services.wikimanager.getAllWikis()
} else {
    wikilist = [xcontext.getDatabase()]
}

def indexes = xwiki.getDocument("Admin.CheckIndexesSQL").getContent().split("\n")

println "== General db settings =="

try {
  store.beginTransaction(context);
  def session = store.getSession(context);
  def connection = session.connection();
  def stmt = connection.createStatement();
  stmt.execute("show variables like 'character_set_%'");
  def rset = stmt.getResultSet();
  def result = null;
  
  while (rset.next()) {
    def varname = rset.getString(1);
    def varvalue = rset.getString(2);
    if (varname!="character_sets_dir") {
      println "* MYSQL encoding setting ${varname}: ${varvalue}"
    }
  }
  stmt.close();
} catch (Exception e) {
   println "* {{error}}Failed to check mysql encoding:{{/error}} " + e.getMessage()
} finally { 
  store.endTransaction(context, false);
}

println "== General db collation settings =="

try {
  store.beginTransaction(context);
  def session = store.getSession(context);
  def connection = session.connection();
  def stmt = connection.createStatement();
  stmt.execute("show variables like 'collation%'");
  def rset = stmt.getResultSet();
  def result = null;
  
  while (rset.next()) {
    def varname = rset.getString(1);
    def varvalue = rset.getString(2);
      println "* MYSQL collation setting ${varname}: ${varvalue}"
  }
  stmt.close();
} catch (Exception e) {
   println "* {{error}}Failed to check mysql encoding:{{/error}} " + e.getMessage()
} finally { 
  store.endTransaction(context, false);
}

println "== Encoding settings by wiki =="

for(wiki in wikilist) {

// check database encoding
try {
  store.beginTransaction(context);
  def session = store.getSession(context);
  def connection = session.connection();
  def stmt = connection.createStatement();
  stmt.execute("show create database ${wiki}");
  def rset = stmt.getResultSet();
  def result = null;
  try {
    rset.first();
    result = rset.getString(2);
  } catch (Exception e2) { println '' }

  // println result
  def i1 = result.indexOf("DEFAULT CHARACTER SET")
  def i2 = result.indexOf("*", i1)
  if (result!=null &amp;&amp; i1!=-1) {
   def enc = result.substring(i1 + 22, i2);
   println "* database encoding of ${wiki} is ${enc}" 
  } else {
   println "* {{error}}Could not find xwikidoc encoding for wiki ${wiki}{{/error}}"
  }
  stmt.close();
} catch (Exception e) {
   println "* {{error}}Failed to check xwikidoc encoding for wiki ${wiki}: {{/error}} " + e.getMessage()
} finally { 
  store.endTransaction(context, false);
}



// check xwikidoc table encoding
try {
  store.beginTransaction(context);
  def session = store.getSession(context);
  def connection = session.connection();
  def stmt = connection.createStatement();
  stmt.execute("show create table ${wiki}.xwikidoc");
  def rset = stmt.getResultSet();
  def result = null;
  try {
    rset.first();
    result = rset.getString(2);
  } catch (Exception e2) {}

  // println result
  def i1 = -1;
  def i2 = -1;
  i1 = result.indexOf("DEFAULT CHARSET=");
  if (i1!=-1) {
   i2 = result.indexOf(" ", i1 + 16);
  }
  if (result!=null &amp;&amp; i1!=-1) {
   def enc = (i2==-1) ? result.substring(i1 + 16) : result.substring(i1 + 8, i2);
   println "* encoding of xwikidoc of ${wiki} is ${enc}" 
  } else {
   println "* {{error}}Could not find xwikidoc encoding for wiki ${wiki}{{/error}}"
  }

  i1 = result.indexOf("COLLATE=")
  if (i1!=-1) {
   i2 = result.indexOf(" ", i1+8)
  }
  if (result!=null &amp;&amp; i1!=-1) {
   def enc = (i2==-1) ? result.substring(i1 + 8) : result.substring(i1 + 8, i2);
   println "* collation of xwikidoc of ${wiki} is ${enc}" 
  } else {
   println "* {{error}}Could not find xwikidoc collation for wiki ${wiki}{{/error}}"
  }

  stmt.close();
} catch (Exception e) {
   println "* {{error}}Failed to check xwikidoc encoding or collation for wiki ${wiki}{{/error}}: " + e.getMessage()
} finally { 
  store.endTransaction(context, false);
}



}

{{/groovy}}</content>
</xwikidoc>
