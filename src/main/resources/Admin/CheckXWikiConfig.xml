<?xml version="1.0" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.3" reference="Admin.CheckXWikiConfig" locale="">
  <web>Admin</web>
  <name>CheckXWikiConfig</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <creationDate>1375188483000</creationDate>
  <parent>Admin.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <date>1593081478000</date>
  <contentUpdateDate>1593081478000</contentUpdateDate>
  <version>1.1</version>
  <title/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>= XWiki Configuration Check =

{{groovy}}

import com.xpn.xwiki.util.Util;
import java.text.DecimalFormat;
import java.lang.management.ManagementFactory;
import javax.management.MBeanServer;
import groovy.jmx.GroovyMBean;
import groovy.xml.XmlParser;

if( System.getProperty('catalina.base') ) {
  appserverpath = System.getProperty('catalina.base')
} else {
  // CONFIG: try to set the path to ypur application server if not found
  appserverpath = ".."
}

def xwikiPath = ["/etc/xwiki/xwiki.cfg", "${appserverpath}/webapps${request.contextPath}/WEB-INF/xwiki.cfg", "/usr/local/xwiki/WEB-INF/xwiki.cfg", "${appserverpath}/webapps/ROOT/WEB-INF/xwiki.cfg", "${appserverpath}/webapps/xwiki/WEB-INF/xwiki.cfg"]

def tomcatPath = ["${appserverpath}/conf/server.xml", "/usr/local/tomcat/conf/server.xml", "/var/lib/tomcat8/conf/", "/var/lib/tomcat9/conf/", "/var/lib/tomcat/conf/"]

def xwikicfgpath = "/usr/local/xwiki/WEB-INF/xwiki.cfg"
def tomcatconfpath = "/usr/local/tomcat/conf/server.xml"

for (path in xwikiPath) {
  if ((new File(path)).exists()) {
    xwikicfgpath = path
    break;
  }
}

for (path in tomcatPath) {
  if ((new File(path)).exists()) {
    tomcatconfpath = path
    break;
  }
}

def wiki = xcontext.getContext().getWiki()

def readableSize(size) {
    if(size &lt;= 0) return "0";
    def units = ["B", "KB", "MB", "GB", "TB" ];
    int digitGroups = (int) (Math.log10(size)/Math.log10(1024));
    return new DecimalFormat("#,##0.#").format(size/Math.pow(1024, digitGroups)) + " " + units[digitGroups];
}

def xwikicfgdir = new File(xwikicfgpath)
def xwikicfgFound = xwikicfgdir.exists();
def xwencodingActive = xwiki.getEncoding()
if (xwikicfgFound) {
  def content = Util.getFileContent(xwikicfgdir)
  def is = new ByteArrayInputStream(content.getBytes());
  def props = new Properties();
  props.load(is);
  xwencoding = props.get("xwiki.encoding")
  xwencryptkey = props.get("xwiki.authentication.encryptionKey")
} else {
  xwencoding = 'null'
  xwencryptkey = 'null'
}


def getEnvVars() {
  Process p = null;
  Properties envVars = new Properties();
  Runtime r = Runtime.getRuntime();
  String OS = System.getProperty("os.name").toLowerCase();
  if (OS.indexOf("windows 9") &gt; -1) {
    p = r.exec( "command.com /c set" );
    }
  else if ( (OS.indexOf("nt") &gt; -1)
         || (OS.indexOf("windows 2000") &gt; -1 )
         || (OS.indexOf("windows xp") &gt; -1) 
         || (OS.indexOf("windows") &gt; -1) ) {
    // thanks to JuanFran for the xp fix!
    p = r.exec( "cmd.exe /c set" );
    }
  else {
    // our last hope, we assume Unix (thanks to H. Ware for the fix)
    p = r.exec( "env" );
    }
  BufferedReader br = new BufferedReader
     ( new InputStreamReader( p.getInputStream() ) );
  String line;
  while( (line = br.readLine()) != null ) {
   int idx = line.indexOf( '=' );
   String key = line.substring( 0, idx );
   String value = line.substring( idx+1 );
   envVars.setProperty( key, value );
   // System.out.println( key + " = " + value );
   }
  return envVars;
}

println "This script intends to show most important parameters for XWiki hosting. You can [[go directly to recommendations&gt;&gt;${doc}||anchor=HRecommendations]]"

println "== Installation Path =="

println "* XWiki configuration path: ${xwikicfgpath}"
println "* Tomcat configuration path: ${tomcatconfpath}"

if (wiki!=null){
println "== Memory Configuration =="

println "This lists the memory settings of the Java VM and the current memory usage. An XWiki instance should be installed with at least 1Gb. A large one with at least  2GB to 4GB, especially if the cache settings are boosted. If after *flushing the cache*, the current free memory is low and the current total close to the maximum the instance might be running out of memory."
println "* Max Memory: ${readableSize(wiki.maxMemory())}" 
println "* Current Total: ${readableSize(wiki.totalMemory())}" 
println "* Current Free: ${readableSize(wiki.freeMemory())}"


println "== Cache configuration =="

println "This lists the main cache settings. An XWiki instance is set by default to 500 for the main cache which is fine for a normal instance. A large one with at least 1000  to 3000. Java Memory needs to be increased to support a larger cache. This setting can be changed in xwiki.cfg with the property xwiki.store.cache.capacity"

MBeanServer server = ManagementFactory.getPlatformMBeanServer()
def mbean = null

try {
   mbean = new GroovyMBean(server, 'org.xwiki.infinispan:type=Cache,name="xwiki.store.pagecache(local)",manager="xwiki",component=Configuration')
} catch (Exception e) {
   mbean = new GroovyMBean(server, 'org.xwiki.infinispan:type=Cache,name="xwiki.store.pagecache(local)",manager="XWikiCacheManager",component=Configuration')
}
esize = (mbean==null) ? null : mbean.getProperty("evictionSize")
csize = esize

try {
   mbean = new GroovyMBean(server, 'org.xwiki.infinispan:type=Cache,name="xwiki.store.pagecache(local)",manager="xwiki",component=Statistics')
} catch (Exception e) {
   mbean = new GroovyMBean(server, 'org.xwiki.infinispan:type=Cache,name="xwiki.store.pagecache(local)",manager="XWikiCacheManager",component=Statistics')
}
isize = (mbean==null) ? null : mbean.getProperty("numberOfEntries")
println "* Store Page Cache in Use : ${isize}/${esize}"



println "== Database configuration =="

println "This lists the database settings of the Java VM and the current pool usage. An XWiki instance is set by default to 2 connections in the pool, which is ok for a very small instance. A large one with at least 10 or 20. If there is no activity on the server, the active setting should be zero."

  
try {
def sessionFactory = wiki.getStore().getStore().sessionFactory
def provider = sessionFactory.@serviceRegistry.getService(org.hibernate.engine.jdbc.connections.spi.ConnectionProvider)
def ds = wiki.getPrivateField(provider,"ds")
def pool = wiki.getPrivateField(ds,"connectionPool")

def maxTotal 
try { maxTotal = pool.maxTotal } catch (Exception e) { maxTotal = pool.maxActive } 
println "* Max Active (number of possible connections to the DB): $maxTotal"
println "* Max Idle (number of possible idle connections to the DB): $pool.maxIdle"
println "* Active (current active connections to the DB): $pool.numActive"
println "* Idle (current idle connections to the DB): $pool.numIdle"
} catch (e) {
  println "Cannot get database info " + e.getMessage()
}

println "== Authenticator Configuration =="

println "* Authenticator class configured in xwiki.cfg: " + wiki.Param("xwiki.authentication.authclass")

println "== Encoding Configuration =="

println "This lists ALL the encoding configuration of tomcat, xwiki, java. All should return UTF-8 except mail.mime.charset which can also return null (the file.encoding config will then be used)"


println "=== System environment ==="

println "* LANG :" + getEnvVars().get("LANG")
println "* PWD :" + getEnvVars().get("PWD")


println "=== Java command line ==="

def fileenc = System.getProperty("file.encoding")
println "* file.encoding: ${fileenc}"
def mimecharset = System.getProperty("mail.mime.charset")
println "* mail.mime.charset: ${mimecharset}"

def tomcatconffile = new File(tomcatconfpath)
if (tomcatconffile.exists()) {
 def node = new XmlParser().parse(tomcatconffile)

println "=== Tomcat configuration ==="
  
println "Prior to Tomcat8 it was necessary to set the connection encoding of protocols to UTF-8. Since Tomcat8+ this is not necessary anymore."
  
for (connector in node.Service.Connector) {
 urienc = connector.'@URIEncoding'
 prot = connector.'@protocol'
 println "* Procotol ${prot} has encoding ${urienc}" 
}
} else {
 println "* {{error}}tomcat.connectors.encoding : The tomcat configuration file could not be found. You might not be using tomcat or the app server path (appserverpath) variable need to be set (you can edit the page to set it){{/error}}"
}


println "=== XWiki Configuration ==="

println "* XWiki encoding used on server: ${xwencodingActive}"
if (xwikicfgFound) {
println "* XWiki encoding from config file: ${xwencoding}";
} else {
 println "{{error}}The XWiki configuration file could not be found at ${xwikicfgpath}. The app server path (appserverpath) variable need to be set (you can edit the page to set it){{/error}}"
}

println "= Recommendations ="

println "Here will be shown our recommendations to increase wiki's performance and stability, if any :"

if (wiki.maxMemory() &lt; 800000000) {
 println "* {{warning}}Amount of memory allocated to XWiki is too low for a production usage. Max memory available for the JVM is set to ${readableSize(wiki.maxMemory())}, it should be at least 800MB.{{/warning}}"
}

if (csize &lt; 1000) {
 println "* {{warning}}Your cache configuration is too low for a production usage. Your cache is set to ${csize} documents, it should be 1000 or more.{{/warning}}"
}

if (xwencodingActive &amp;&amp; xwencodingActive != "UTF-8") {
 println "* {{warning}}XWiki encoding is not set properly. We advise to use UTF-8 encoding for every software used (Servlet container, front end, database...){{/warning}}"
}

if (xwencryptkey == "titititititititititititititititi") {
 println "* {{warning}}You should change your encryption key (xwiki.authentication.encryptionKey) and validation key (xwiki.authentication.validationKey) of cookies in xwiki.cfg configuration file {{/warning}}"
}

}
{{/groovy}}</content>
</xwikidoc>
